#!/usr/bin/env python3
import subprocess
import requests
import json
import random
import sys
import time
import re

# Random-Like-Tracks V1.4 (with refined genre filtering)
# --- Configuration ---
LASTFM_API_KEY = "ADD YOUR LAST-FM-API-KEY_HERE" # <<< Your actual Last.fm API Key
NUM_SIMILAR_LASTFM_ARTISTS = 25 # How many similar artists to fetch from Last.fm
NUM_TRACKS_PER_SIMILAR_ARTIST = 25 # How many tracks to consider from each similar artist in your library

# --- Helper Functions ---
def normalize_genre(genre_str):
    """
    Normalizes a genre string by stripping whitespace and converting to lowercase.
    It PRESERVES content in parentheses to allow for more specific genre matching.
    e.g., "Jazz (sax)" -> "jazz (sax)"
          "Classical " -> "classical"
    """
    if not genre_str:
        print(f"[DEBUG:normalize_genre] Input was empty/None, returning None.") # DEBUG
        return None
    
    # *** CRUCIAL CHANGE HERE: No longer removing content in parentheses ***
    # Just strip whitespace and convert to lowercase for consistent comparison
    normalized = genre_str.strip().lower()
    
    print(f"[DEBUG:normalize_genre] Input: '{genre_str}' -> Normalized: '{normalized}'.") # DEBUG
    return normalized if normalized else None # Return None if it becomes an empty string after normalization

# --- MPD Interaction Functions ---
def get_current_artist():
    """Gets the currently playing artist from MPD."""
    print("[MPD] Attempting to retrieve currently playing artist...")
    try:
        result = subprocess.run(['mpc', 'current', '-f', '%artist%'], capture_output=True, text=True, check=True)
        artist = result.stdout.strip()
        if not artist or artist == '(No song is playing)':
            print("[MPD] No song is currently playing or artist information is unavailable.", file=sys.stderr)
            return None
        print(f"[MPD] Currently playing artist: '{artist}'.")
        return artist
    except subprocess.CalledProcessError as e:
        print(f"[ERROR] Failed to get current artist from MPD. Is MPD running and 'mpc' installed? Error: {e}", file=sys.stderr)
        print(f"[ERROR] Stderr from mpc: {e.stderr.strip()}", file=sys.stderr)
        return None
    except FileNotFoundError:
        print("[ERROR] 'mpc' command not found. Please ensure mpc is installed and in your system's PATH.", file=sys.stderr)
        return None

def get_current_genre():
    """Gets the genre of the currently playing track from MPD."""
    print("[MPD] Attempting to retrieve currently playing genre...")
    try:
        result = subprocess.run(['mpc', 'current', '-f', '%genre%'], capture_output=True, text=True, check=True)
        genre = result.stdout.strip()
        if not genre or genre == '(No song is playing)':
            print("[MPD] No song is currently playing or genre information is unavailable.", file=sys.stderr)
            return None
        print(f"[MPD] Currently playing genre (raw): '{genre}'.")
        return genre
    except subprocess.CalledProcessError as e:
        print(f"[ERROR] Failed to get current genre from MPD. Error: {e}", file=sys.stderr)
        print(f"[ERROR] Stderr from mpc: {e.stderr.strip()}", file=sys.stderr)
        return None
    except FileNotFoundError:
        print("[ERROR] 'mpc' command not found. Please ensure mpc is installed and in your system's PATH.", file=sys.stderr)
        return None

def get_mpd_artists():
    """Gets a set of all unique artist names in the MPD database."""
    print("[MPD] Fetching all artist names from your MPD library. This might take a moment for large libraries...")
    try:
        result = subprocess.run(['mpc', 'list', 'artist'], capture_output=True, text=True, check=True)
        artists = result.stdout.strip().split('\n')
        mpd_artists = set(artist.strip() for artist in artists if artist.strip())
        print(f"[MPD] Found {len(mpd_artists)} unique artists in your MPD library.")
        return mpd_artists
    except subprocess.CalledProcessError as e:
        print(f"[ERROR] Failed to get all MPD artists. Error: {e}", file=sys.stderr)
        print(f"[ERROR] Stderr from mpc: {e.stderr.strip()}", file=sys.stderr)
        return set()
    except FileNotFoundError:
        print("[ERROR] 'mpc' command not found. Please ensure mpc is installed and in your system's PATH.", file=sys.stderr)
        return set()

def get_tracks_by_artist(artist_name_lastfm):
    """
    Gets a list of file paths for tracks by a given artist from MPD.
    Tries various common name variations to match Last.fm names to local tags,
    using `mpc find artist` which outputs full paths on your system.
    """
    candidate_mpc_artist_names = []

    # 1. Exact Last.fm name
    candidate_mpc_artist_names.append(artist_name_lastfm)

    # 2. Common variations (e.g., adding "Group", "Quartet", changing "David" to "Dave")
    # This part can be expanded based on common inconsistencies in your library.
    # Example for David Liebman variations:
    if "David Liebman" in artist_name_lastfm:
        candidate_mpc_artist_names.append("Dave Liebman")
        candidate_mpc_artist_names.append("Dave Liebman Group")
        candidate_mpc_artist_names.append("Dave Liebman Quartet")
    
    # Add other common variations you might have based on your library tags
    # e.g., if Last.fm gives "Bill Evans", your tag might be "Bill Evans Trio"
    # if "Bill Evans" in artist_name_lastfm:
    #      candidate_mpc_artist_names.append("Bill Evans Trio")
    #      candidate_mpc_artist_names.append("Bill Evans Quintet")
    # if "Charlie Parker" in artist_name_lastfm:
    #      candidate_mpc_artist_names.append("Charlie Parker Quintet")

    # Remove duplicates and maintain order (important for trying in a specific order if desired, though here it's just for uniqueness)
    unique_candidate_names = []
    seen = set()
    for name in candidate_mpc_artist_names:
        if name not in seen:
            unique_candidate_names.append(name)
            seen.add(name)

    all_found_tracks = set() # Use a set to avoid duplicate tracks if multiple searches find the same song

    print(f"[MPD] Attempting to find tracks for '{artist_name_lastfm}' using variations...")
    for mpc_artist_name in unique_candidate_names:
        print(f"  Trying 'mpc find artist \"{mpc_artist_name}\"'...")
        try:
            # Using 'mpc find artist' because it outputs full paths on your system
            result = subprocess.run(['mpc', 'find', 'artist', mpc_artist_name], capture_output=True, text=True, check=True)
            tracks = result.stdout.strip().split('\n')
            found_tracks_for_this_variation = [track.strip() for track in tracks if track.strip()]
            
            if found_tracks_for_this_variation:
                print(f"    Found {len(found_tracks_for_this_variation)} tracks for '{mpc_artist_name}'.")
                all_found_tracks.update(found_tracks_for_this_variation)
            else:
                print(f"    No tracks found for '{mpc_artist_name}'.")
        except subprocess.CalledProcessError as e:
            # `mpc find` returns non-zero exit status (1) if no songs are found.
            # We only want to print a real error if it's something else.
            if "No songs found" not in e.stderr:
                print(f"[ERROR] Failed to find tracks for '{mpc_artist_name}'. Error: {e}", file=sys.stderr)
                print(f"[ERROR] Stderr from mpc: {e.stderr.strip()}", file=sys.stderr)
            else:
                print(f"    No songs found for '{mpc_artist_name}' (as expected for no results).")
        except FileNotFoundError:
            print("[ERROR] 'mpc' command not found. Please ensure mpc is installed and in your system's PATH.", file=sys.stderr)
            return [] # Critical error, return empty list and let main handle it

    final_tracks = list(all_found_tracks)
    if final_tracks:
        print(f"[MPD] Overall, found {len(final_tracks)} unique tracks for artists related to '{artist_name_lastfm}'.")
    else:
        print(f"[MPD] No unique tracks found for artists related to '{artist_name_lastfm}'.")
    return final_tracks

def get_genre_for_track_path(track_path):
    """
    Gets the genre tag for a specific track path using 'mpc --format "%genre%" ls "path"'.
    """
    try:
        # Use mpc ls with --format to get specific tag for a path
        result = subprocess.run(['mpc', '--format', '%genre%', 'ls', track_path], capture_output=True, text=True, check=True)
        genre = result.stdout.strip()
        print(f"[DEBUG:get_genre_for_track_path] For track '{track_path.split('/')[-1]}', raw genre: '{genre}'.") # DEBUG
        return genre if genre else None # Return None if genre is empty
    except subprocess.CalledProcessError as e:
        print(f"[WARNING] Could not get genre for track '{track_path}'. Error: {e.stderr.strip()}", file=sys.stderr)
        return None
    except FileNotFoundError:
        print("[ERROR] 'mpc' command not found. Please ensure mpc is installed and in your system's PATH.", file=sys.stderr)
        return None


def add_tracks_to_mpd_queue(track_list, num_to_add):
    """Adds a specified number of tracks to the MPD play queue."""
    if not track_list:
        print("[Queue] No tracks to add to the queue. Skipping addition.")
        return

    random.shuffle(track_list) # Shuffle the list to get a random selection
    tracks_to_add = track_list[:min(len(track_list), num_to_add)]

    print(f"\n[Queue] Adding {len(tracks_to_add)} new tracks to MPD queue...")
    for i, track_path in enumerate(tracks_to_add):
        try:
            display_name = track_path.split('/')[-1]
            print(f"  [{i+1}/{len(tracks_to_add)}] Adding: {display_name}")
            subprocess.run(['mpc', 'add', track_path], check=True, capture_output=True, text=True)
        except subprocess.CalledProcessError as e:
            print(f"[ERROR] Failed to add track '{track_path}' to MPD. Error: {e.stderr.strip()}", file=sys.stderr)
        except FileNotFoundError:
            print("[ERROR] 'mpc' command not found. Please ensure mpc is installed and in your system's PATH.", file=sys.stderr)
            return

# --- Last.fm API Interaction Function ---
def get_similar_lastfm_artists(artist_name, limit=20):
    """Queries Last.fm for similar artists."""
    if not LASTFM_API_KEY or LASTFM_API_KEY == "YOUR_LASTFM_API_KEY": # Still include this check in case of human error
        print("[ERROR] LASTFM_API_KEY is not set or is still the placeholder. Please get one from Last.fm API website and update the script.", file=sys.stderr)
        return []

    print(f"[Last.fm] Querying Last.fm for up to {limit} similar artists to '{artist_name}'...")
    url = "http://ws.audioscrobbler.com/2.0/"
    params = {
        "method": "artist.getsimilar",
        "artist": artist_name,
        "api_key": LASTFM_API_KEY,
        "format": "json",
        "limit": limit
    }
    try:
        response = requests.get(url, params=params)
        response.raise_for_status() # Raise HTTPError for bad responses (4xx or 5xx)
        data = response.json()

        similar_artists = []
        if 'similarartists' in data and 'artist' in data['similarartists']:
            for artist_info in data['similarartists']['artist']:
                similar_artists.append(artist_info['name'])
            print(f"[Last.fm] Successfully fetched {len(similar_artists)} similar artists from Last.fm.")
        else:
            print("[Last.fm] Last.fm API response did not contain expected 'similarartists' data.", file=sys.stderr)
            print(f"[Last.fm] Raw response (first 200 chars): {str(data)[:200]}", file=sys.stderr)
        return similar_artists
    except requests.exceptions.RequestException as e:
        print(f"[ERROR] Network error or issue querying Last.fm API: {e}", file=sys.stderr)
        return []
    except json.JSONDecodeError:
        print(f"[ERROR] Error decoding JSON from Last.fm API. Check API key and response format. Raw response: {response.text[:200]}...", file=sys.stderr)
        return []

# --- Main Script Logic ---
def main():
    print("--- Starting MPD Similar Tracks Suggester ---")
    current_artist = get_current_artist()
    if not current_artist:
        print("--- Script Aborted: No current artist. ---")
        return

    current_raw_genre = get_current_genre()
    current_normalized_genre = None
    if current_raw_genre:
        current_normalized_genre = normalize_genre(current_raw_genre)
        if current_normalized_genre:
            print(f"[MPD] Current playing genre (normalized for comparison): '{current_normalized_genre}'.")
        else:
            print("[MPD] Current playing genre could not be normalized. Genre filtering might be limited.")
    else:
        print("[MPD] No genre found for current playing track. Genre filtering will not be available.")

    # User input for genre filtering
    filter_by_genre = False
    if current_normalized_genre:
        while True:
            # Display the exact normalized genre to the user
            genre_filter_input = input(f"\nDo you want to limit suggestions to tracks in the '{current_normalized_genre}' genre? (y/n/no-filter) [Default: y]: ").strip().lower()
            if genre_filter_input in ('y', ''):
                filter_by_genre = True
                print("Genre filtering enabled.")
                break
            elif genre_filter_input == 'n':
                filter_by_genre = False
                print("Genre filtering disabled.")
                break
            elif genre_filter_input == 'no-filter': # Explicit option to skip
                filter_by_genre = False
                print("Genre filtering disabled.")
                break
            else:
                print("Invalid input. Please enter 'y', 'n', or 'no-filter'.", file=sys.stderr)
    else:
        print("\nSkipping genre filter option as no current genre was detected or normalized.")


    print("\n--- Step 1: Fetching similar artists from Last.fm ---")
    lastfm_similar_artists = get_similar_lastfm_artists(current_artist, limit=NUM_SIMILAR_LASTFM_ARTISTS)

    if not lastfm_similar_artists:
        print("--- Script Aborted: No similar artists found from Last.fm. ---")
        return

    print("\n--- Step 2: Comparing with your local MPD library ---")
    mpd_artists_set = get_mpd_artists()
    if not mpd_artists_set:
        print("--- Script Aborted: Could not retrieve MPD library artists. ---")
        return

    # Filter Last.fm similar artists to only those found as exact matches in the MPD artist list
    # This is primarily for reporting to the user about exact matches.
    artists_in_mpd_exact = [artist for artist in lastfm_similar_artists if artist in mpd_artists_set]

    if artists_in_mpd_exact:
        display_artists = ', '.join(artists_in_mpd_exact[:5])
        if len(artists_in_mpd_exact) > 5:
            display_artists += '...'
        print(f"Found {len(artists_in_mpd_exact)} similar artists (exact match by name) in your MPD library: {display_artists}")
    else:
        print("Note: No exact-matching similar artists from Last.fm were found in your MPD's artist list. Proceeding to search for tracks by all Last.fm similar artists broadly.")


    print("\n--- Step 3: Gathering candidate tracks ---")
    candidate_tracks_all_genres = []
    artists_with_tracks = set() # Use a set to track which Last.fm artists actually yielded tracks

    # Iterate through ALL Last.fm similar artists and use the improved `get_tracks_by_artist`
    for artist_name in lastfm_similar_artists:
        tracks = get_tracks_by_artist(artist_name)
        if tracks:
            # We don't want to over-add from one artist if they have a ton of tracks.
            # Select a random sample up to NUM_TRACKS_PER_SIMILAR_ARTIST.
            num_to_add_from_artist = min(len(tracks), NUM_TRACKS_PER_SIMILAR_ARTIST)
            selected_tracks = random.sample(tracks, num_to_add_from_artist)
            candidate_tracks_all_genres.extend(selected_tracks)
            artists_with_tracks.add(artist_name) # Add the Last.fm artist name

    if not candidate_tracks_all_genres:
        print("No tracks found for any of the similar artists from Last.fm in your MPD library, even with variation searching. This might mean artist tags are very inconsistent or no relevant music is present.")
        print("--- Script Aborted: No candidate tracks found. ---")
        return

    print(f"Successfully gathered {len(candidate_tracks_all_genres)} candidate tracks (before genre filtering) from {len(artists_with_tracks)} artists: {', '.join(list(artists_with_tracks)[:5])}{'...' if len(artists_with_tracks) > 5 else ''}")

    final_candidate_tracks = []
    if filter_by_genre and current_normalized_genre:
        print(f"\n--- Step 3a: Filtering tracks by specific genre: '{current_normalized_genre}' ---")
        genre_filtered_count = 0
        for track_path in candidate_tracks_all_genres:
            track_genre_raw = get_genre_for_track_path(track_path)
            track_genre_normalized = normalize_genre(track_genre_raw)
            
            # DEBUGGING PRINTS (still useful to see the comparison)
            print(f"[DEBUG:Filtering] Comparing track '{track_path.split('/')[-1]}' (normalized genre: '{track_genre_normalized}') with current normalized genre: '{current_normalized_genre}'")
            
            if track_genre_normalized == current_normalized_genre:
                final_candidate_tracks.append(track_path)
                genre_filtered_count += 1
        print(f"  Found {genre_filtered_count} tracks matching the specific genre '{current_normalized_genre}'.")
        if not final_candidate_tracks:
            print(f"No tracks found matching the specific genre '{current_normalized_genre}'. Consider running again without genre filtering.")
            print("--- Script Aborted: No genre-matched tracks found. ---")
            return
    else:
        final_candidate_tracks = candidate_tracks_all_genres
        print("Genre filtering was not requested or no current genre was found. Using all gathered candidate tracks.")


    # --- Step 4: User input for number of tracks ---
    while True:
        try:
            default_tracks_to_add = min(10, len(final_candidate_tracks))
            user_input = input(f"\nHow many tracks would you like to add to the queue (1-{len(final_candidate_tracks)})? [Default: {default_tracks_to_add}]: ")
            if not user_input:
                total_tracks_to_add = default_tracks_to_add
            else:
                total_tracks_to_add = int(user_input)

            if 1 <= total_tracks_to_add <= len(final_candidate_tracks):
                break
            else:
                print(f"Invalid number. Please enter a number between 1 and {len(final_candidate_tracks)}.", file=sys.stderr)
        except ValueError:
            print("Invalid input. Please enter a valid number.", file=sys.stderr)

    # --- Step 5: Adding tracks to MPD queue ---
    add_tracks_to_mpd_queue(final_candidate_tracks, total_tracks_to_add)

    print("\n--- Script Finished Successfully! ---")

if __name__ == "__main__":
    main()

